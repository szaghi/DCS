/**
@mainpage DCS

@author    Stefano Zaghi
@author    Emilio Campana
@version   0.0.1
@date      2013-07-01
@copyright GNU Public License version 3.

@section Goals

DCS is a didactic code aimed at presenting a practical implementation of some simple numerical methods for solving 2D incompressible Navier-Stokes equations. It constitutes supplementary educational material of other scientific disclosure efforts.

@section Copyrights

DCS is an open source project, it is distributed under the GPL v3. Anyone is interest to use, to develop or contribute to DCS is welcome.

@section Source Source Code

It can be found at: https://github.com/szaghi/DCS

For Git users just run
@code
git clone https://github.com/szaghi/DCS
@endcode
for obtaining a local copy of DCS

@page Mathematical Mathematical and Numerical Models

Brief review of the models used

The 2D incompressible Navier-Stokes equations are written into the non dimensional streamfunction (s) and vorticty (v) formulation:

\f$\begin{array}{*{20}{c}}\frac{\partial^2s}{\partial x^2}+ \frac{\partial^2s}{\partial y^2}=-v\\ \frac{1}{Re}\frac{\partial^2v}{\partial
x^2}+\frac{1}{Re} \frac{\partial^2v}{\partial y^2}= \frac{\partial s}{\partial y}\frac{\partial v}{\partial x}-\frac{\partial
s}{\partial x}\frac{\partial v}{\partial y}\end{array}\f$

where \f$Re\f$ is the Reynolds number and \f$x,y\f$ are the Cartesian coordinates of the inertial frame of reference. Applying central differencing the Laplacian operator of the streamfunction can be discretized as following:

\f$\frac{s_{i+1,j}-2s_{i,j}+s_{i-1,j}}{\Delta h^2}+\frac{s_{i,j}-2s_{i,j}+s_{i,j}}{\Delta h^2} =-v_{i,j}\f$

where \f$\Delta h=\Delta x=\Delta y\f$ is the uniform space spacing. Re-ordering LHS it is obtained an approximation of the stream function:

\f$s_{i,j}=\frac{s_{i+1,j}+s_{i-1,j}+s_{i,j+1}+s_{i,j-1}+\Delta h^2v_{i,j}}{4}\f$

The streamfunction equation is solved by means of Successive Over Relaxation (SOR) method to obtain the steady state solution:

\f$s_{i,j}=\beta\frac{s_{i+1,j}+s_{i-1,j}+s_{i,j+1}+s_{i,j-1}+\Delta h^2v_{i,j}}{4}+\left(1-\beta\right)s_{i,j}\f$

where \f$\beta\f$ is the over-relaxation parameter. After the (iterative) value of the streamfunction has been computed by means of the above SOR approach, the vorticity is computed similarly:


\f$v_{i,j}=\beta\left[\frac{v_{i+1,j}+s_{i-1,j}+s_{i,j+1}+s_{i,j-1}}{4}+
Re\frac{\left(s_{i,j+1}-s_{i,j-1}\right)\left(v_{i+1,j}-v_{i-1,j}\right)-
\left(s_{i+1,j}-s_{i-1,j}\right)\left(v_{i,j+1}-v_{i,j-1}\right)}{16}\right]+ \left(1-\beta\right)v_{i,j}\f$

where central differencing has been used also for first order partial derivative.

The above SOR equation for \f$s\f$ and \f$v\f$ are coupled with suitable boundary conditions, see <a href="http://dx.doi.org/10.1108/EUM0000000004030">T. Stortkuhl, C. Zenger and S. Zimmer</a>. The iteration on each cell \f$(i,j)\f$ ends when the residuals become lower than a user-defined threshold value.

@page Compiling Compiling DCS

Using makefile for compiling DCS

To compile DCS a suitable makefile is provided. This makefile has a rule for printing its own usage:

@code
make help
@endcode

This will print into the console the following message:

@code
 Make options of DCS code

 Compiler choice: COMPILER=intel => default
  COMPILER=gnu   => GNU gfortran
  COMPILER=intel => Intel Fortran

 Compiling options
  DEBUG=yes(no)     => on(off) debug                  (default no)
  F03STD=yes(no)    => on(off) check standard fortran (default yes)
  OPTIMIZE=yes(no)  => on(off) optimization           (default no)
  OPENMP=yes(no)    => on(off) OpenMP directives      (default no)

 Provided Rules: default=DCS => compile the code
  cleanobj     => cleaning compiled object
  cleanmod     => cleaning .mod files
  cleanmsg     => cleaning make-log massage files
  clean        => running cleanobj, cleanmod and cleanmsg
  cleanall     => running clean and cleanexe
  tar          => creating a tar archive of the project
  doc          => building the documentation
@endcode

The options should be self-explanatory. For a standard, non-debug compilation just type make. A successful compilation should print the following message:

@code
 Compiler used  intel => ifort
 Source dir     ./src/
  Debug          no
  F-standard     yes
  Optimize       no

 Compiling options
 [-cpp -c -module ./mod/ -static -assume protect_parens -assume norealloc_lhs -fp-model source -std03 ]

 Linking options
 [ -std03 ]

 Compiling IR_Precision.f90
 Compiling Data_Type_Conservative.f90
 Compiling Data_Type_Vector.f90
 Compiling Data_Type_Node.f90
 Compiling Data_Type_Face.f90
 Compiling Data_Type_Cell_Quad.f90
 Compiling Data_Type_Mesh.f90
 Compiling Data_Type_Cavity.f90
 Compiling DCS.f90

 Assembling DCS
@endcode

@page Running Running DCS

Running DCS in a nutshell

Just run it without arguments and a help message will be prompted:

@code
 Error: no argument has been passed to command line
 DCS
 Driven-Cavity Simulator code
 Usage:
 ./DCS -N number_of_cells [optionals parameters]

 Optional parameters:
 -Re Reynolds_number => default 500
 -beta over_relaxation_parameter => default 0.6
 -rtol residual_tolerance => default 10^-4
 -nout standard_output_update_frequency => default 1000 iterations
 -oform output_file_format => "tec" for Tecplot output or "gnu" for gnuplot one, default "tec"

 Example:
 ./DCS -Re 9.d2 -beta 0.5d0 -N 256 -nout 10000 -rtol 1.d-6
@endcode
The options should be self-explanatory. An output file named DCS_out.xxx is created after the simulation is finished. Accordingly to the command line arguments used a Gnuplot (DCS_out.gnu) or Tecplot (DCS_out.tec) file is created. Two layout are provided within DCS, namely stream.gnu and stream.lay for visualizing the stream function in the Gnuplot or Tecplot format respectively.

*/
